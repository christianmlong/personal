[user]
	name = Christian Long
	email = chlong2@cisco.com
    signingkey = 031A48F5617AF959
[gitreview]
    username = christianmlong
[push]
    default = simple
[core]
    editor = vim
	excludesfile = /Users/chlong2/.gitignore_global
    # Don't complain about extra blank lines at the end of a file.
    whitespace = -blank-at-eof
[commit]
    # Instead of the default commit behavior which is to remove all lines
    # beginning with #, this 'scissors' setting adds a scissors line to the
    # commit message in the editor, and then removes all text after the
    # scissors line.
    #
    # The scissors line looks like this:
    # ---------------->%------------------------
    #
    # Note however that Github doesn't render Markdown in commit messages, so
    # don't try to get fancy ;)
    cleanup = scissors
	template = /Users/chlong2/.stCommitMsg

[interactive]
    # No need to press return in interactive mode
    singleKey = true

[alias]
    # Just this branch
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    # Some branches
    lols = log --graph --decorate --pretty=oneline --abbrev-commit --branches=*
    # All branches and tags
    l = log --graph --decorate --pretty=oneline --abbrev-commit --all
    # No pager
    lnp = "!git --no-pager -c color.ui=always log --graph --decorate --pretty=oneline --abbrev-commit --all | head -n40"
    st = status
    co = checkout
    ci = commit
    cim = commit -m
    wip = commit -m "wip"
    d = diff
    dw = diff --color-words
    dd = diff --word-diff=porcelain
    ddd = diff --color-words=.
    dt = difftool
    ds = diff --staged
    dts = difftool --staged
    mt = mergetool
    rc = rebase --continue
    lsp = log --stat -p
    # Diff with the upstream tracking branch (e.g. origin/<branch name>)
    du = diff @{u}
    dtu = difftool @{u}
    # Force push to remote
    pfu = push -f origin
    bv = branch -a -vv
    cp = cherry-pick
    vr = difftool -t visual-revert

    # This script "floats" any number of local branches
    # on top of a chosen base branch. So, when the base
    # branch gets updated, it will move your whole tree
    # of local branches on top of the new commits.
    #
    # Usage:
    # git float [--no-merge] branch1 branch2 branch3
    #
    # It needs an environment variable set
    # export GIT_FLOAT_BASE_BRANCH=<your branch name here>
    #
    # See also my .bashrc, for a way to enable bash
    # autocompletion for this custom alias.
    float = "!/Users/chlong2/projects/public-personal/utilities/git/git_float.sh"

    # Reference for git up alias
    # http://stackoverflow.com/questions/15316601/in-what-cases-could-git-pull-be-harmful
    up = "!git fetch --all --prune; git merge --ff-only @{u}"
    ap = add --patch
    ff = merge --ff-only

    # Find orphaned commits
    # Source: https://gist.github.com/matthewmccullough/988077
    # with gitk
    #orphank = "!gitk --all `git reflog | cut -d ' ' -f 1`&"
    # on the command line
    orphanl = "!git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -d ' ' -f 1`"

    incoming = "!git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}"
    outgoing = log --pretty=oneline --abbrev-commit --graph @{u}..

    # I can never remember this syntax
    delete-remote-branch = "!f() { git push --delete origin $1 && git branch --unset-upstream $1; }; f"
    delete-remote-tag = push --delete origin

    # Another pretty log format
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(black)%s%C(reset) %C(dim black)- %an%C(reset)%C(bold yellow)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(black)%s%C(reset) %C(dim black)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n''          %C(black)%s%C(reset)%n''          %C(dim black)- %an <%ae> %C(reset) %C(dim black)(committer: %cn <%ce>)%C(reset)'

    pr = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

    # See https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit/30998048#30998048
    find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"


[rerere]
    enabled = true
    autoupdate = true

[diff]
    tool = kdiff3
    compactionHeuristic = true
    colorMoved = default
[merge]
    tool = kdiff3
    ff = no
    commit = no
[difftool]
    # Auto-accept file prompts when launching merge tools
    prompt = false
[mergetool]
    # See https://gist.github.com/tdd/470582
    # Clean up backup files created by merge tools on tool exit
    keepBackup = false
    # Clean up temp files created by merge tools on tool exit
    keepTemporaries = false
    # Put the temp files in a dedicated dir
    writeToTemp = true

# Custom diff tool for ignoring some changes in Betamax cassettes
[difftool "betamax"]
    cmd = diff --recursive --unified=1 --color --ignore-matching-lines=' *\"recorded_at\": .*' \"$LOCAL\" \"$REMOTE\"

# Custom diff tool for reverting patches visually in kdiff3
[difftool "visual-revert"]
    cmd = kdiff3 $LOCAL $REMOTE --output $MERGED

[hub]
    host = github4-chn.cisco.com
    host = wwwin-github.cisco.com

# Git config for the 'delta' tool for prettier git diffs
# brew install git-delta
# https://github.com/dandavison/delta/
[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

# Git config suggestions for 'delta' from Julia Evans
# https://jvns.ca/blog/2021/01/07/day-33--a-login-bug--a-git-trick--and-generating-yaml-files/
[delta]
    features = side-by-side line-numbers decorations
    whitespace-error-style = 22 reverse
    # syntax-theme = GitHub
    syntax-theme = Solarized (light)

# Automatically-added entries from SourceTree
[difftool "sourcetree"]
	cmd = /Applications/kdiff3.app/Contents/MacOS/kdiff3 \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/kdiff3.app/Contents/MacOS/kdiff3 \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
	trustExitCode = true
