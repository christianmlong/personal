[user]
	name = Christian Long
	email = chlong2@cisco.com
[gitreview]
	username = christianmlong
[push]
	default = simple
[core]
	editor = vim
    # Don't complain about extra blank lines at the
    # end of a file.
    whitespace = -blank-at-eof
[alias]
    # Just this branch
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    # Some branches
    lols = log --graph --decorate --pretty=oneline --abbrev-commit --branches=*
    # All branches and tags
    l = log --graph --decorate --pretty=oneline --abbrev-commit --all
    # No pager
    lnp = "!git --no-pager -c color.ui=always log --graph --decorate --pretty=oneline --abbrev-commit --all | head -n40"
    st = status
    co = checkout
    ci = commit
    cim = commit -m
    wip = commit -m "wip"
    d = diff
    dcw = diff --color-words
    dcw2 = diff --color-words=.
    dt = difftool
    ds = diff --staged
    dscw = diff --staged --color-words
    dscw2 = diff --staged --color-words=.
    dts = difftool --staged
    mt = mergetool
    rc = rebase --continue
    lsp = log --stat -p
    # Diff with the upstream tracking branch (e.g. origin/<branch name>)
    du = diff @{u}
    ducw = diff --color-words @{u}
    ducw2 = diff --color-words=. @{u}
    dtu = difftool @{u}
    # Force push to remote
    pfu = push -f origin
    bv = branch -a -vv

    # This script "floats" any number of local branches
    # on top of a chosen base branch. So, when the base
    # branch gets updated, it will move your whole tree
    # of local branches on top of the new commits.
    #
    # Usage:
    # git float [--no-merge] branch1 branch2 branch3
    #
    # It needs an environment variable set
    # export GIT_FLOAT_BASE_BRANCH=<your branch name here>
    #
    # See also my .bashrc, for a way to enable bash
    # autocompletion for this custom alias.
    float = "!/Users/chlong2/projects/public-personal/utilities/git/git_float.sh"

# Reference for git up alias
# http://stackoverflow.com/questions/15316601/in-what-cases-could-git-pull-be-harmful
    up = "!git fetch --all --prune; git merge --ff-only @{u}"

    ap = add --patch
    # Use word diff when doing add --patch
    apw = -c interactive.diffFilter=\"git diff --color-words\" add --patch
    ff = merge --ff-only

# Find orphaned commits
# Source: https://gist.github.com/matthewmccullough/988077
# with gitk
    orphank = "!gitk --all `git reflog | cut -d ' ' -f 1`&"
# on the command line
    orphanl = "!git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -d ' ' -f 1`"

    incoming = "!git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}"
    outgoing = log --pretty=oneline --abbrev-commit --graph @{u}..

# I can never remember this syntax
    delete-remote-branch = "!f() { git push --delete origin $1 && git branch --unset-upstream $1; }; f"
    delete-remote-tag = push --delete origin

# Another pretty log format
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(black)%s%C(reset) %C(dim black)- %an%C(reset)%C(bold yellow)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(black)%s%C(reset) %C(dim black)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n''          %C(black)%s%C(reset)%n''          %C(dim black)- %an <%ae> %C(reset) %C(dim black)(committer: %cn <%ce>)%C(reset)'

    pr  = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

[rerere]
	enabled = true
	autoupdate = true

[diff]
	tool = vimdiff2
[merge]
	tool = vimdiff2
